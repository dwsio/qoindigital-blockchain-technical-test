/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Ballot {
  export type CandidateStruct = {
    id: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    voteCount: PromiseOrValue<BigNumberish>;
    votePercentage: PromiseOrValue<BigNumberish>;
  };

  export type CandidateStructOutput = [
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: BigNumber;
    name: string;
    voteCount: BigNumber;
    votePercentage: BigNumber;
  };
}

export interface BallotInterface extends utils.Interface {
  functions: {
    "candidates(uint256)": FunctionFragment;
    "castVote(address,uint256,uint256)": FunctionFragment;
    "createRandom(uint256)": FunctionFragment;
    "getCandidates()": FunctionFragment;
    "getPeriode()": FunctionFragment;
    "getRandomVoter()": FunctionFragment;
    "getVoters()": FunctionFragment;
    "getWinningCandidate()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardRandomVoter()": FunctionFragment;
    "sendData(uint256)": FunctionFragment;
    "sendEther(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "voterAddresses(uint256)": FunctionFragment;
    "voters(address)": FunctionFragment;
    "winningCandidates(uint256)": FunctionFragment;
    "winningVoters(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "candidates"
      | "castVote"
      | "createRandom"
      | "getCandidates"
      | "getPeriode"
      | "getRandomVoter"
      | "getVoters"
      | "getWinningCandidate"
      | "owner"
      | "renounceOwnership"
      | "rewardRandomVoter"
      | "sendData"
      | "sendEther"
      | "transferOwnership"
      | "voterAddresses"
      | "voters"
      | "winningCandidates"
      | "winningVoters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createRandom",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPeriode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomVoter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getWinningCandidate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRandomVoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sendEther",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voterAddresses",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "winningCandidates",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "winningVoters",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createRandom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeriode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRandomVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWinningCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardRandomVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendEther", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "winningCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "winningVoters",
    data: BytesLike
  ): Result;

  events: {
    "AnnounceWinner(string,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnnounceWinner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AnnounceWinnerEventObject {
  arg0: string;
  arg1: BigNumber;
  arg2: BigNumber;
}
export type AnnounceWinnerEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AnnounceWinnerEventObject
>;

export type AnnounceWinnerEventFilter = TypedEventFilter<AnnounceWinnerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Ballot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BallotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
        votePercentage: BigNumber;
      }
    >;

    castVote(
      voterAddress: PromiseOrValue<string>,
      candidateId: PromiseOrValue<BigNumberish>,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRandom(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCandidates(
      overrides?: CallOverrides
    ): Promise<[Ballot.CandidateStructOutput[]]>;

    getPeriode(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getRandomVoter(overrides?: CallOverrides): Promise<[string]>;

    getVoters(overrides?: CallOverrides): Promise<[string[]]>;

    getWinningCandidate(
      overrides?: CallOverrides
    ): Promise<[Ballot.CandidateStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardRandomVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendData(
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendEther(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voterAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

    winningCandidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
        votePercentage: BigNumber;
      }
    >;

    winningVoters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  candidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      id: BigNumber;
      name: string;
      voteCount: BigNumber;
      votePercentage: BigNumber;
    }
  >;

  castVote(
    voterAddress: PromiseOrValue<string>,
    candidateId: PromiseOrValue<BigNumberish>,
    currentTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRandom(
    number: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCandidates(
    overrides?: CallOverrides
  ): Promise<Ballot.CandidateStructOutput[]>;

  getPeriode(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  getRandomVoter(overrides?: CallOverrides): Promise<string>;

  getVoters(overrides?: CallOverrides): Promise<string[]>;

  getWinningCandidate(
    overrides?: CallOverrides
  ): Promise<Ballot.CandidateStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardRandomVoter(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendData(
    currentTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendEther(
    _to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voterAddresses(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  voters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

  winningCandidates(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, BigNumber] & {
      id: BigNumber;
      name: string;
      voteCount: BigNumber;
      votePercentage: BigNumber;
    }
  >;

  winningVoters(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
        votePercentage: BigNumber;
      }
    >;

    castVote(
      voterAddress: PromiseOrValue<string>,
      candidateId: PromiseOrValue<BigNumberish>,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRandom(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCandidates(
      overrides?: CallOverrides
    ): Promise<Ballot.CandidateStructOutput[]>;

    getPeriode(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    getRandomVoter(overrides?: CallOverrides): Promise<string>;

    getVoters(overrides?: CallOverrides): Promise<string[]>;

    getWinningCandidate(
      overrides?: CallOverrides
    ): Promise<Ballot.CandidateStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardRandomVoter(overrides?: CallOverrides): Promise<void>;

    sendData(
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendEther(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voterAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber] & { voted: boolean; vote: BigNumber }>;

    winningCandidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, BigNumber] & {
        id: BigNumber;
        name: string;
        voteCount: BigNumber;
        votePercentage: BigNumber;
      }
    >;

    winningVoters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AnnounceWinner(string,uint256,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): AnnounceWinnerEventFilter;
    AnnounceWinner(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): AnnounceWinnerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    castVote(
      voterAddress: PromiseOrValue<string>,
      candidateId: PromiseOrValue<BigNumberish>,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRandom(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCandidates(overrides?: CallOverrides): Promise<BigNumber>;

    getPeriode(overrides?: CallOverrides): Promise<BigNumber>;

    getRandomVoter(overrides?: CallOverrides): Promise<BigNumber>;

    getVoters(overrides?: CallOverrides): Promise<BigNumber>;

    getWinningCandidate(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardRandomVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendData(
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendEther(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voterAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningCandidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    winningVoters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    castVote(
      voterAddress: PromiseOrValue<string>,
      candidateId: PromiseOrValue<BigNumberish>,
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRandom(
      number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCandidates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPeriode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRandomVoter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVoters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWinningCandidate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardRandomVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendData(
      currentTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendEther(
      _to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voterAddresses(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningCandidates(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    winningVoters(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
